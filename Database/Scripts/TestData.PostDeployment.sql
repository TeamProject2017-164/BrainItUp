/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93

GO

SET NOCOUNT ON

SET IDENTITY_INSERT [Questions] ON

MERGE INTO [Questions] AS Target
USING (VALUES
  (1,N'В каком городе находится музей Метрополитен?')
 ,(2,N'Какая планета, видимая на небе, была самой главной для Майя?')
 ,(3,N'В каких веках была эпоха Возрождения?')
 ,(4,N'Какую пошлину ввели в XII веке в Англии для того чтобы заставить мужчин пойти на войну?')
 ,(5,N'Какая книга является самой маленькой в мире?')
 ,(6,N'Сколько основных органов чувств у человека?')
 ,(7,N'В каком году впервые прошел кислотный дождь?')
 ,(8,N'От какого насекомого пошло название русской плясовой?')
 ,(9,N'Сказители былин играли на каком щипковом инструменте?')
 ,(10,N'Что такое анапест?')
 ,(11,N'Кого, согласно поговорке, подкладывают недоброжелатели?')
 ,(12,N'Кто сидит рядом с водителем спортивного автомобиля во время ралли?')
 ,(13,N'Кого подковал Левша?')
 ,(14,N'Какие цвета использует в своей символике футбольный клуб "Динамо"?')
 ,(15,N'Что является основным ингредиентом татарского блюда «Кыстыбый»?')

) AS Source ([QuestionId],[Content])
ON (Target.[QuestionId] = Source.[QuestionId])
WHEN MATCHED AND (
	NULLIF(Source.[Content], Target.[Content]) IS NOT NULL OR NULLIF(Target.[Content], Source.[Content]) IS NOT NULL) THEN
 UPDATE SET
  [Content] = Source.[Content]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([QuestionId],[Content])
 VALUES(Source.[QuestionId],Source.[Content])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
;
GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Questions]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Questions] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [Questions] OFF
GO
SET NOCOUNT OFF
GO

SET NOCOUNT ON

SET IDENTITY_INSERT [Answers] ON

MERGE INTO [Answers] AS Target
USING (VALUES
  (1,1,N'Венеция',0)
 ,(2,1,N'Нью-Йорк',1)
 ,(3,1,N'Париж',0)
 ,(4,1,N'Лондон',0)

 ,(5,2,N'Венера',1)
 ,(6,2,N'Марс',0)
 ,(7,2,N'Солнце',0)
 ,(8,2,N'Меркурий',0)

 ,(9,3,N'14-15',0)
 ,(10,3,N'18-19',0)
 ,(11,3,N'14-16',1)
 ,(12,3,N'11-13',0)

 ,(13,4,N'Налог на тунеядство',0)
 ,(14,4,N'Налог на трусость',1)
 ,(15,4,N'Налог на отсутствие сапог',0)
 ,(16,4,N'Налог на хозяйство',0)

 ,(17,5,N'«Хамелеон» А.П. Чехова',1)
 ,(18,5,N'«Чистый понедельник» Бунина',0)
 ,(19,5,N'Басни Крылова',0)
 ,(20,5,N'«Гранатовый браслет» Куприна',0)

 ,(21,6,N'6',0)
 ,(22,6,N'4',0)
 ,(23,6,N'3',0)
 ,(24,6,N'5',1)

 ,(25,7,N'1933',0)
 ,(26,7,N'1871',0)
 ,(27,7,N'1852',1)
 ,(28,7,N'1766',0)

 ,(29,8,N'Комар',1)
 ,(30,8,N'Муха',0)
 ,(31,8,N'Оса',0)
 ,(32,8,N'Жук',0)

 ,(33,9,N'Арфа',0)
 ,(34,9,N'Домра',0)
 ,(35,9,N'Балалайка',0)
 ,(36,9,N'Гусли',1)

 ,(37,10,N'Стихотворный размер',1)
 ,(38,10,N'Перстень',0)
 ,(39,10,N'Животное',0)
 ,(40,10,N'Блюдо',0)

 ,(41,11,N'Ежа',0)
 ,(42,11,N'Утку',0)
 ,(43,11,N'Свинью',1)
 ,(44,11,N'Быка',0)

 ,(45,12,N'Штурман',1)
 ,(46,12,N'Бортстрелок',0)
 ,(47,12,N'Лоцман',0)
 ,(48,12,N'Капитан команды',0)

 ,(49,13,N'Муху',0)
 ,(50,13,N'Сороконожку',0)
 ,(51,13,N'Корову',0)
 ,(52,13,N'Блоху',1)

 ,(53,14,N'Голубой и белый',1)
 ,(54,14,N'Белый и красный',0)
 ,(55,14,N'Желтый и зеленый',0)
 ,(56,14,N'Красный и синий',0)

 ,(57,15,N'Свекла',0)
 ,(58,15,N'Картошка',1)
 ,(59,15,N'Капуста',0)
 ,(60,15,N'Помидоры',0)


) AS Source ([AnswerId],[QuestionId],[Content],[IsCorrect])
ON (Target.[AnswerId] = Source.[AnswerId])
WHEN MATCHED AND (
	NULLIF(Source.[QuestionId], Target.[QuestionId]) IS NOT NULL OR NULLIF(Target.[QuestionId], Source.[QuestionId]) IS NOT NULL OR 
	NULLIF(Source.[Content], Target.[Content]) IS NOT NULL OR NULLIF(Target.[Content], Source.[Content]) IS NOT NULL OR 
	NULLIF(Source.[IsCorrect], Target.[IsCorrect]) IS NOT NULL OR NULLIF(Target.[IsCorrect], Source.[IsCorrect]) IS NOT NULL) THEN
 UPDATE SET
  [QuestionId] = Source.[QuestionId], 
  [Content] = Source.[Content], 
  [IsCorrect] = Source.[IsCorrect]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([AnswerId],[QuestionId],[Content],[IsCorrect])
 VALUES(Source.[AnswerId],Source.[QuestionId],Source.[Content],Source.[IsCorrect])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
;
GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Answers]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Answers] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [Answers] OFF
GO
SET NOCOUNT OFF
GO



