/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93

GO

SET NOCOUNT ON

SET IDENTITY_INSERT [Questions] ON

MERGE INTO [Questions] AS Target
USING (VALUES
  (1,N'В какой городе находится музей Метрополитен?')
 ,(2,N'Какая планета, видимая на небе, была самой главной для Майя?')
 ,(3,N'В каких веках была эпоха Возрождения?')
) AS Source ([QuestionId],[Content])
ON (Target.[QuestionId] = Source.[QuestionId])
WHEN MATCHED AND (
	NULLIF(Source.[Content], Target.[Content]) IS NOT NULL OR NULLIF(Target.[Content], Source.[Content]) IS NOT NULL) THEN
 UPDATE SET
  [Content] = Source.[Content]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([QuestionId],[Content])
 VALUES(Source.[QuestionId],Source.[Content])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
;
GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Questions]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Questions] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [Questions] OFF
GO
SET NOCOUNT OFF
GO

SET NOCOUNT ON

SET IDENTITY_INSERT [Answers] ON

MERGE INTO [Answers] AS Target
USING (VALUES
  (1,1,N'Нью-Йорк',1)
 ,(2,1,N'Венеция',0)
 ,(3,1,N'Париж',0)
 ,(4,2,N'Венера',1)
 ,(5,2,N'Марс',0)
 ,(6,2,N'Солнце',0)
 ,(7,3,N'14-15',0)
 ,(8,3,N'18-20',0)
 ,(9,3,N'14-16',1)
) AS Source ([AnswerId],[QuestionId],[Content],[IsCorrect])
ON (Target.[AnswerId] = Source.[AnswerId])
WHEN MATCHED AND (
	NULLIF(Source.[QuestionId], Target.[QuestionId]) IS NOT NULL OR NULLIF(Target.[QuestionId], Source.[QuestionId]) IS NOT NULL OR 
	NULLIF(Source.[Content], Target.[Content]) IS NOT NULL OR NULLIF(Target.[Content], Source.[Content]) IS NOT NULL OR 
	NULLIF(Source.[IsCorrect], Target.[IsCorrect]) IS NOT NULL OR NULLIF(Target.[IsCorrect], Source.[IsCorrect]) IS NOT NULL) THEN
 UPDATE SET
  [QuestionId] = Source.[QuestionId], 
  [Content] = Source.[Content], 
  [IsCorrect] = Source.[IsCorrect]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([AnswerId],[QuestionId],[Content],[IsCorrect])
 VALUES(Source.[AnswerId],Source.[QuestionId],Source.[Content],Source.[IsCorrect])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
;
GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Answers]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Answers] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [Answers] OFF
GO
SET NOCOUNT OFF
GO

SET NOCOUNT ON

SET IDENTITY_INSERT [Users] ON

MERGE INTO [Users] AS Target
USING (VALUES
  (1,N'Ira29')
 ,(2,N'Paul9009')
 ,(3,N'Nick32')
) AS Source ([UserId],[NickName])
ON (Target.[UserId] = Source.[UserId])
WHEN MATCHED AND (
	NULLIF(Source.[NickName], Target.[NickName]) IS NOT NULL OR NULLIF(Target.[NickName], Source.[NickName]) IS NOT NULL) THEN
 UPDATE SET
  [NickName] = Source.[NickName]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([UserId],[NickName])
 VALUES(Source.[UserId],Source.[NickName])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
;
GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Users]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Users] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [Users] OFF
GO
SET NOCOUNT OFF
GO

SET NOCOUNT ON

SET IDENTITY_INSERT [UserAnswers] ON

MERGE INTO [UserAnswers] AS Target
USING (VALUES
 (1,1,1,1)
,(2,1,4,2)
,(3,1,7,3)
,(4,2,2,1)
,(5,2,5,2)
,(6,2,8,3)
,(7,3,3,1)
,(8,3,6,2)
,(9,3,9,3)
) AS Source ([UserAnswerId],[UserId],[AnswerId],[QuestionId])
ON (Target.[UserAnswerId] = Source.[UserAnswerId])
WHEN MATCHED AND (
	NULLIF(Source.[UserId], Target.[UserId]) IS NOT NULL OR NULLIF(Target.[UserId], Source.[UserId]) IS NOT NULL OR 
	NULLIF(Source.[AnswerId], Target.[AnswerId]) IS NOT NULL OR NULLIF(Target.[AnswerId], Source.[AnswerId]) IS NOT NULL OR 
	NULLIF(Source.[QuestionId], Target.[QuestionId]) IS NOT NULL OR NULLIF(Target.[QuestionId], Source.[QuestionId]) IS NOT NULL) THEN
 UPDATE SET
  [UserId] = Source.[UserId], 
  [AnswerId] = Source.[AnswerId], 
  [QuestionId] = Source.[QuestionId]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([UserAnswerId],[UserId],[AnswerId],[QuestionId])
 VALUES(Source.[UserAnswerId],Source.[UserId],Source.[AnswerId],Source.[QuestionId])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
;
GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [UserAnswers]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[UserAnswers] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [UserAnswers] OFF
GO
SET NOCOUNT OFF
GO


